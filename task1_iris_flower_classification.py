# -*- coding: utf-8 -*-
"""Task1_iris_flower_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tst13K7d1TtA3yXxoF-4NnFo1F48io7-

LetsGrowMore Data Science Internship (VIP)

Name: Sarita Yadav

Title: Iris Flowers Classification ML Project

Batch: April

Step 1: Data Gathering

Import Dependancy
"""

import pandas as pd
import numpy as np
import  seaborn as sns
import matplotlib.pyplot as plt

"""Reading Dataset"""

iris_df = pd.read_csv('/content/IRIS.csv')
iris_df

iris_df.head()

iris_df.columns

iris_df=iris_df.replace({'species':{'Iris-setosa':1,'Iris-virginica':2,'Iris-versicolor':3}})
iris_df.head()

"""Step 2: Understanding the Data"""

iris_df.describe()

iris_df.info()

iris_df.shape

"""Step 3: Checking Nulls

"""

iris_df.isnull().sum()

"""Step 4: Data Transformation"""

iris_df['species'].unique()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
iris_df['species']= le.fit_transform(iris_df['species'])
iris_df

x=np.array(iris_df.iloc[:,3]).reshape(-1,1)
x

y=np.array(iris_df.iloc[:,-1]).reshape(-1,1)
y

"""Step 5: Data Visualization

Heatmap
"""

cor = iris_df.corr()

plt.figure(figsize=(5,5))
sns.heatmap(iris_df.corr(), annot=True)
plt.show()

"""Histogram"""

iris_df.hist(bins=50,density=True,figsize=(12,12))
plt.show()

"""Boxplot"""

plt.figure(figsize=(12,8))
sns.boxplot(data=iris_df)
plt.show()

"""Pairplot"""

sns.pairplot(iris_df,hue='species')

"""Step 6: Model Building"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=1)
x_train.shape

y_train.shape

from sklearn.linear_model import LinearRegression

lr=LinearRegression()

lr.fit(x_train,y_train)

y_predict=lr.predict(x_test)
y_predict

from sklearn.svm import SVC
classifier=SVC(kernel='linear',random_state=0)
classifier.fit(x_train,y_train)

from sklearn.metrics import accuracy_score
prediction = classifier.predict(x_test)
print("Accuracy:",accuracy_score(y_test,prediction))

from sklearn.metrics import classification_report
print("Report:",classification_report(y_test,prediction))

